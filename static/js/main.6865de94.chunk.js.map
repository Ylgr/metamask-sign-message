{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","web3","setWeb3","address","setAddress","messageValue","moment","tz","startOf","valueOf","toString","signatureInput","setSignatureInput","signResult","setSignResult","addressOwner","setAddressOwner","connectWallet","a","window","ethereum","Web3","request","method","eth","getAccounts","addresses","on","alert","signMessage","personal","sign","result","console","error","message","recoverMessage","ecRecover","className","Container","Button","onClick","Row","Col","md","Card","CardHeader","CardBody","Label","Input","type","value","disabled","CardFooter","onChange","event","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6865de94.chunk.js","sourcesContent":["import {useState} from 'react';\nimport Web3 from 'web3';\nimport {Container, Button, Card, CardHeader, CardBody, CardFooter, Label, Input, Row, Col} from 'reactstrap';\nimport moment from 'moment-timezone';\n\nfunction App() {\n\n  const [web3, setWeb3] = useState(null);\n  const [address, setAddress] = useState('');\n\n  const messageValue = (moment().tz('Asia/Ho_Chi_Minh').startOf('day').valueOf() / 1000).toString()\n  const [signatureInput, setSignatureInput] = useState('')\n  const [signResult, setSignResult] = useState('')\n  const [addressOwner, setAddressOwner] = useState('')\n\n  const connectWallet = async () => {\n    if(window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      await window.ethereum.request({ method: \"eth_requestAccounts\" })\n      setWeb3(web3);\n      const addresses = await web3.eth.getAccounts()\n      setAddress(addresses[0])\n\n      window.ethereum.on('accountsChanged', function(addresses){\n        setAddress(addresses[0])\n      })\n\n    } else {\n      alert(\"Không phát hiện được ví.\");\n    }\n  };\n\n  const signMessage = async () => {\n    try {\n      const result = await web3.eth.personal.sign(messageValue, address)\n      setSignResult(result)\n    } catch (e) {\n      console.error('err: ', e.message)\n    }\n\n  }\n\n  const recoverMessage = async () => {\n    try {\n      const result = await web3.eth.personal.ecRecover(messageValue, signatureInput)\n      setAddressOwner(result)\n    } catch (e) {\n      console.error('err: ', e.message)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {!web3 && <Container>\n        <Button onClick={() => connectWallet()}>Connect wallet</Button>\n      </Container>}\n      <Row>\n        <Col md=\"6\">\n          <Card>\n            <CardHeader>Sign message</CardHeader>\n            <CardBody>\n              <Label>Message: </Label>\n              <Input type='text' value={messageValue} disabled/>\n              <Button onClick={() => signMessage()} disabled={!web3}>Sign</Button>\n            </CardBody>\n            <CardFooter>\n              <Label>Result: </Label>\n              <p>{signResult}</p>\n            </CardFooter>\n          </Card>\n        </Col>\n        <Col md=\"6\">\n          <Card>\n            <CardHeader>Recover message</CardHeader>\n            <CardBody>\n              <Label>Message: </Label>\n              <Input type='text' value={messageValue} disabled/>\n              <Label>Signature: </Label>\n              <Input type='text' value={signatureInput} onChange={(event) => setSignatureInput(event.target.value)}/>\n              <Button onClick={() => recoverMessage()}>Recover</Button>\n            </CardBody>\n            <CardFooter>\n              <Label>Address owner: </Label>\n              <p>{addressOwner}</p>\n            </CardFooter>\n          </Card>\n        </Col>\n      </Row>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}